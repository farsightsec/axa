#!/bin/sh -e

# exit on first failure
set -o errexit

# use local source configurations and not already installed configs
AXACONF=@abs_top_srcdir@/etc
export AXACONF

# these tests output to stdout, can consider collecting all to temp files
# and checking in there instead so test output is more organized

# This contains tests that don't require an AXA server.

# This tests the radtool / sratool command tool.
RADTOOL=@builddir@/sratool/radtool
SRATOOL=@builddir@/sratool/sratool
DATADIR=@abs_top_srcdir@/tests/tool-tests-data
CONF=@builddir@/tests/test-config
 
# radtool and sratool are the same tools, but mode is set by what
# command name is used to execute it.
# Note that when using libtool, when running from source tree, the radtool
# libtool temporary wrapper script runs lt-radtool (which runs as sratool)
# so several following tests run the "rad" command first to set the mode.

# feel free to add numbers between;
# or if substantially change a test, use a new number.

# running this radtool test should identify as SRA mode
echo 000100 use rad mode to set RAD mode should have no output
echo rad | $RADTOOL -n $CONF | grep . && exit 1

echo 000105 sratool mode should indicate it is SRA
echo "mode"| $SRATOOL -n $CONF | grep "SRA mode"

echo 000110 use rad mode to set RAD mode and check is RAD mode
echo "rad ; mode"| $RADTOOL -n $CONF | grep "RAD mode"

echo 001000 test -c to read single command
echo | $RADTOOL -n $CONF -c $DATADIR/001000-single-command | grep "radtool built using AXA library"

echo 001010 test -c to read one command line with multiple commands
echo | $RADTOOL -n $CONF -c $DATADIR/001010-multiple-commands-on-single-line | grep -2 "radtool built using AXA library" | grep -1 "RAD mode"

echo 002000 test -c to read multiple commands from a single file
echo | $RADTOOL -n $CONF -c $DATADIR/002000-multiple-commands | tail -1 | grep "RAD mode"

echo 002100 test -c to read unrecognized command should fail
echo | $RADTOOL -n $CONF -c $DATADIR/002100-unrecognized-command 2>&1 | grep 'unrecognized command "thisdoesnotexist"'

echo 002110 test -c to read unrecognized command should fail with no output to stdout
echo | $RADTOOL -n $CONF -c $DATADIR/002100-unrecognized-command | grep 'unrecognized command "thisdoesnotexist"' && exit 1

echo 002200 test -c to read unrecognized command after good commands should run the commands until that failure
echo | $RADTOOL -n $CONF -c $DATADIR/002200-valid-then-unrecognized-command 2>&1| grep -3 "radtool built using AXA library" | grep 'unrecognized command "this is not valid"'

echo 002210 test -c to read unrecognized command after good commands should run commands before, but none after a failure
echo | $RADTOOL -n $CONF -c $DATADIR/002210-valid-before-and-after-unrecognized-command 2>&1| grep -3 "verbose off" | grep -3 'unrecognized command "this is not valid"' | grep "RAD mode" && exit 1

echo 002300 test -c to read non-existent file should fail
echo | $RADTOOL -n $CONF -c this-file-does-not-exist-x8y3746t7by 2>&1 | grep "initial.*failed"

echo 002400 test -c happens before piped in command
# NOTE:  sets rad but version is "sra" so shows what happens first
echo "rad ; mode" | $SRATOOL -n $CONF -c "$DATADIR/001000-single-command" | grep -2 "sratool built using AXA library" | grep "RAD mode"

echo 003000 using source command without argument should fail
echo "rad ; source" | $RADTOOL -n $CONF | grep "source filename"

echo 003100 using source command without argument should fail and next command on same line should not run
echo "rad ; source /dev/null ; mode" | $RADTOOL -n $CONF | grep "RAD mode"
echo "rad ; source ; mode" | $RADTOOL -n $CONF | grep -2 "source filename" | grep "RAD mode" && exit 1

echo 003200 using source command to read unrecognized command after good commands should run commands before, but none after the failure
echo "rad ; source $DATADIR/002210-valid-before-and-after-unrecognized-command" | $RADTOOL -n $CONF 2>&1| grep -3 "verbose off" | grep -3 'unrecognized command "this is not valid"' | grep "RAD mode" && exit 1

echo 003210 using source command to read unrecognized command after good commands should run commands before, but none after the failure in the sourced file, but will still run next command on the same command line
echo "rad ; source $DATADIR/002210-valid-before-and-after-unrecognized-command ; debug off" | $RADTOOL -n $CONF 2>&1| grep -3 "verbose off" | grep -3 'unrecognized command "this is not valid"' | grep -3 "debug off" | grep -3 "radtool radtool built using AXA library" && exit 1

echo 004000 use source command to read single command \
  " ; also tests that pipe and source together work"
echo "rad ; source $DATADIR/001000-single-command" | $RADTOOL -n $CONF | grep "radtool built using AXA library"

echo 004100 use source command to one command line with multiple commands
# well this doesn't test perfectly since also setting rad here
echo "rad ; source $DATADIR/001010-multiple-commands-on-single-line" | $RADTOOL -n $CONF | grep -2 "radtool built using AXA library" | grep "RAD mode"

echo 005000 use source command to read multiple commands from a single file
echo "rad ; source $DATADIR/002000-multiple-commands" | $RADTOOL -n $CONF | tail -1 | grep "RAD mode"

echo 006000 pipe in single command
# this is redundant since already did several times
echo "version" | $RADTOOL -n $CONF | grep "built using AXA library"

echo 007000 pipe in multiple semicolon-separated commands on single line
# this is redundant since already did several times
echo "rad ; verbose ; version ; mode" | $RADTOOL -n $CONF | grep -3 "verbose off" | grep -3 "radtool built using AXA library" | grep -3 "RAD mode"

echo 008000 pipe in multiple commands on separate lines
{ echo rad ;
  echo verbose ;
  echo version ;
  echo mode ; } | $RADTOOL -n $CONF | grep -3 "verbose off" | grep -3 "radtool built using AXA library" | grep -3 "RAD mode"

echo 009000 pipe in multiple commands on separate lines, including multiple commands on single lines
{ echo "rad ; verbose" ;
  echo "version ; mode" ; } | $RADTOOL -n $CONF | grep -3 "verbose off" | grep -3 "radtool built using AXA library" | grep -3 "RAD mode"

echo 009100 pipe in multiple commands on separate lines, with an unrecognized command should run commands before, but not after the failure
cat $DATADIR/002210-valid-before-and-after-unrecognized-command | $RADTOOL -n $CONF 2>&1| grep -3 "verbose off" | grep -3 'unrecognized command "this is not valid"' | grep "RAD mode" && exit 1

echo 010000 'use mixed-case "Rad" to set RAD mode'
echo "Rad ; mode" | $RADTOOL -n $CONF | grep "RAD mode"

echo 011000 'set RAD mode and use mixed-case "veRsiOn" to get version'
echo "rad ; veRsiOn" | $RADTOOL -n $CONF | grep "radtool built using AXA library"

echo 011010 'use mixed-case "veRsiOn" with sratool to get version'
echo "veRsiOn" | $SRATOOL -n $CONF | grep "sratool built using AXA library"

echo 050000 RAD mode has runits command
echo "rad ; runits" | $RADTOOL -n $CONF 2>&1 | grep '"runits" requires a connection to a server'

echo 050100 SRA mode does not have runits command
echo "sra ; runits" | $RADTOOL -n $CONF 2>&1 | grep 'unrecognized command "runits"'

echo 050110 sratool does not have runits command
echo "runits" | $SRATOOL -n $CONF 2>&1 | grep 'unrecognized command "runits"'

echo 050200 RAD mode has anomaly command
echo "rad ; anomaly foo" | $RADTOOL -n $CONF 2>&1 | grep '"anomaly foo" requires a connection to a server'

echo 050300 SRA mode does not have anomaly command
echo "sra ; anomaly foo" | $RADTOOL -n $CONF 2>&1 | grep 'unrecognized command "anomaly foo"'

echo 050310 sratool does not have anomaly command
echo "anomaly foo" | $SRATOOL -n $CONF 2>&1 | grep 'unrecognized command "anomaly foo"'

# rad has delete anomaly
# rad has get anomaly
# rad has list anomaly
# rad has list anomalies

echo 050300 SRA mode has channel command
echo "sra ; channel" | $RADTOOL -n $CONF 2>&1 | grep '"channel" requires a connection to a server'

echo 050310 sratool has channel command
echo "channel" | $SRATOOL -n $CONF 2>&1 | grep '"channel" requires a connection to a server'

echo 050400 RAD mode does not have channel command
echo "rad ; channel" | $RADTOOL -n $CONF 2>&1 | grep 'unrecognized command "channel"'

# sra has get channels
# sra has list channels

echo 050500 SRA mode has watch command
echo "sra ; watch" | $RADTOOL -n $CONF 2>&1 | grep '"watch" requires a connection to a server'

echo 050510 sratool has watch command
echo "watch" | $SRATOOL -n $CONF 2>&1 | grep '"watch" requires a connection to a server'

# sra has delete watches
# sra has get watches
# sra has list watches

echo 060000 'test "?" with partial commands to match multiple command names, but not show full help'
echo "? st" | $SRATOOL -n $CONF 2>&1 | grep -5 "status" | grep -5 "stop" | grep "server status" && exit 1

echo 060010 'test "?" with partial command to match a single command name'
echo "? statu" | $SRATOOL -n $CONF 2>&1 | grep "server status"

echo 060020 partial command that matches multiple should show full names of matching commands with synopsis
echo "ver" | $SRATOOL -n $CONF 2>&1 | grep -2 "verbose .*off" | grep "version"

echo 060030 partial command that matches single command should run \
  "; this also tests that exit will exit and no commands ran after it"
echo "ex ; version" | $SRATOOL -n $CONF 2>&1 | grep "tool version" && exit 1

# Note: the "mode" argument is optional
echo 060040 partial command and arguments that matches single command should run \
  "; this also tests the error mode toggle"
echo "err mo d ; err" | $SRATOOL -n $CONF 2>&1 | grep "error mode disconnect"

echo 060050 command with too many arguments will fail
echo "count 5 10" | $SRATOOL -n $CONF 2>&1 | fgrep 'Arguments provided seemed to be invalid for command "count"'

echo 060060 command missing argument will show help output
# NOTE: later could have a real error message
echo "sleep" | $RADTOOL -n $CONF 2>&1 | grep "Stop accepting commands"

echo 060100 tab in front of a command is okay
echo "	version" | $SRATOOL -n $CONF | grep "built using AXA library"

echo 060110 tab after a command is okay
echo "verbose	" | $SRATOOL -n $CONF | grep "verbose off"

# TODO:
#echo 'test # (pound-sign) starts a comment and following text on the line is ignored"
#echo "verbose ;  # version" | $RADTOOL | grep "tool version" && exit 1
# TODO: verbose # ; does not work

echo 070000 count command can set a count
echo "count 72 ; count" | $RADTOOL -n $CONF 2>&1 | grep "72 packets remaining to print of 72 total"

echo 070100 sleep command should sleep for correct time
before=`date +%s`
echo "sleep 2" | $SRATOOL -n $CONF
after=`date +%s`
delay=$(($after-$before))
echo $after - $before = $delay
# assume no other delay beyond a second on test system
if [ $delay -gt 3 -o $delay -le 1 ] ; then exit 1 ; fi

# tools require a subscriber-side configuration file
echo 070200 using radtool with non-existing configuration file should not fail
echo "mode" | $RADTOOL -n ${DATADIR}/does/not/exist 2>&1 | grep "RAD mode"

echo 070300 using sratool with non-existing configuration file should fail
echo "mode" | $SRATOOL -n ${DATADIR}/does/not/exist 2>&1 | grep "SRA mode"

# the tools' configuration file must not be group or world readable
echo 070400 using radtool with configuration file of mode 640 should fail
echo "mode" | $RADTOOL -n ${CONF}-badperms 2>&1 | grep "has permissions set for group/other"

echo 070500 using sratool with configuration file of mode 640 should fail
echo "mode" | $SRATOOL -n ${CONF}-badperms 2>&1 | grep "has permissions set for group/other"

# 
# These are also tested in the various above tests:
# space in front of command
# space after command

